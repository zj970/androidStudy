OOP:面向对象编程（Object Oriented Programming）

接口	接口是把公共实例（非静态）方法和属性组合起来，以封装特定功能的一个集合。一旦定义了接口，就可以在类中实现它。这样类就可以支持接口所指定的所有属性和成员。
注意：接口不能单独存在。不能像实例化一个类那样实例化接口。另外接口不能包含实现其成员的任何代码，而只能定义成员本身。实现过程必须在实现接口中的类完成。
接口名一般以大写字母I开头；

一个类可以支持多个接口，多个类也可以也可以支持相同的接口；
IDisposable接口特别有趣。支持IDispose接口的对象必须实现Dispose()方法，即它们必须提供这个方法的代码。当不在需要某个对象(例如，在对象超出作用域之前)时，就调用这个方法，释放重要资源，否则，等到对垃圾回收调用析构方法时才会释放该资源。这样可以更好地控制对像所用资源。




继承	继承是OOP最重要的特性之一。任何类都可以从另一个类继承，这就是说，这个类拥有它继承的类的所有成员。在OOP中，被继承（也称为派生）的类称为父类（也称为基类）。
注意：C#中的对象仅能直接派生于一个基类，当然基类也可以有自己的基类；Java也只能有一个父类，但可以有很多接口；

继承性可从一个较一般的基类扩展或创建更多的特定类。

在继承一个基类时，成员的可访问性就成了一个重要问题。派生类不能访问基类的私有成员，但可以访问其公共成员。不过，派生类和外部代码都可以访问其公共成员，protected属性只有派生类才能访问protected成员；外部代码不能访问protected和private成员

除了定义成员的保护级别，还可以为成员定义其继承行为；
基类的成员是虚拟的，则成员可以有继承它的类重写。如果没有提供其他实现方式，通过派生类使用成员的外部代码就自动访问基类中成员的实现代码。
注意：虚拟成员不能是私有成员;

UML类图：抽象类名以斜体显示(有时它的方框有一个短横线).
类可以是密封(seal)的;密封的类不能作为基类，所以没有派生类；

注意：接口也可以继承自其他接口，与类不同的是，接口可以继承多个基接口；


多态性：	继承的一个结果是派生于基类的类在方法和属性上有一定的重叠，因此，可以使用相同的语法处理从一个基类实例化的对象。

接口的多态性：尽管不能像对象那样实例化接口，但可以建立接口类型的变量，然后就可以在支持该接口的对象上，使用这个变量来访问该接口提供的方法和属性。这样就提供了以相同方式访问多个对象的简单方式，且不依赖一个公共的基类。
注意：派生类会继承其基类支持的接口
